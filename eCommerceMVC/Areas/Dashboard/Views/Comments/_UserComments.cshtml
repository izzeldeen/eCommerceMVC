@using Microsoft.AspNet.Identity;
@model eCommerceMVC.Areas.Dashboard.ViewModels.CommentsListingViewModel

@if (Model != null && Model.User != null && Model.Comments != null)
{
    var canDelete = User.Identity.IsAuthenticated && (User.IsInRole("Administrator") || User.Identity.GetUserId() == Model.User.Id);

    <div class="row mt-2">
        <div class="col-md-10">
            <form method="post" id="searchForm">
                <div class="input-group mb-3">
                    <input name="searchTerm" type="text" value="@Model.SearchTerm" class="form-control" placeholder="Search in Comments.">
                    <button id="searchBtn" type="button" class="form-control btn btn-primary"><i class="fas fa-search mr-1"></i> Search</button>
                    <a data-href="@Url.Comments(userID: (Model.User != null ? Model.User.Id : string.Empty))" role="button" class="text-white form-control btn btn-primary dataLink"><i class="fas fa-redo-alt mr-1"></i> Reset</a>
                </div>
                <input type="hidden" name="page" value="1">
                <input type="hidden" name="items" value="10">
                <input type="hidden" name="userID" value="@(Model.User != null ? Model.User.Id : null)">
            </form>
        </div>
    </div>
    <hr />

    if (Model.Comments != null && Model.Comments.Count > 0)
    {
        foreach (var comment in Model.Comments)
        {
            var defaultStars = 5 - comment.Rating;

            var commentedProduct = Model.CommentedProducts != null ? Model.CommentedProducts.FirstOrDefault(x => x.ID == comment.RecordID) : null;

            <div class="row">
                <div class="col-md-2 text-center">
                    @Html.UserAvatar(comment.User.Picture, "img rounded-circle img-fluid", style: "height:105px; width:105px;", alt: "User Avatar")
                </div>
                <div class="@(canDelete ? "col-md-8" : "col-md-10")">
                    <p>
                        <a class="float-left" @*href="@Url.Action("UserProfile", "Profile", new { userid = comment.UserID })"*@>
                            <strong>
                                @comment.User.FullName
                            </strong>
                        </a>
                        <span class="float-right mb-2">
                            @comment.TimeStamp
                        </span>
                    </p>
                    <div class="clearfix"></div>
                    <p>
                        @comment.Text
                    </p>
                    <span class="text-warning">
                        @for (int i = 1; i <= comment.Rating; i++)
                        {
                            <i class="fas fa-star"></i>
                        }

                        @for (int i = 1; i <= defaultStars; i++)
                        {
                            <i class="far fa-star"></i>
                        }
                    </span>

                    @if (commentedProduct != null)
                    {
                        <span class="float-right">
                            <a href="@Url.ProductDetails(commentedProduct.Category.Name.ToLower().SanitizeString(), comment.RecordID)" target="_blank">
                                @commentedProduct.Name
                            </a>
                        </span>
                    }
                </div>

                @if (canDelete)
                {
                    <div class="col-md-2 text-center">
                        <button data-id="@comment.ID" class="btn btn-danger m-2 btnDeleteComment"><i class="fas fa-trash-alt mr-1"></i> Delete</button>
                    </div>
                }
            </div>
            <hr />
        }

        if (Model.Pager != null && Model.Pager.TotalPages > 1)
        {
            <nav>
                <ul class="pagination justify-content-center">

                    @if (Model.Pager.CurrentPage == 1)
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#">Previous</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link dataLink" data-href="@Url.Action("Index", "Comments", new { pageNo = Model.Pager.CurrentPage - 1, userID = (Model.User != null ? Model.User.Id : null), searchTerm = !string.IsNullOrEmpty(Model.SearchTerm) ? Model.SearchTerm : null })">Previous</a>
                        </li>
                    }

                    @for (int page = Model.Pager.StartPage; page < Model.Pager.EndPage + 1; page++)
                    {
                        var active = page == Model.Pager.CurrentPage ? "active" : string.Empty;

                        <li class="page-item @active">
                            <a class="page-link dataLink" data-href="@Url.Action("Index", "Comments", new { pageNo = page, userID = (Model.User != null ? Model.User.Id : null), searchTerm = !string.IsNullOrEmpty(Model.SearchTerm) ? Model.SearchTerm : null })">
                                @page
                            </a>
                        </li>
                    }

                    @if (Model.Pager.CurrentPage == Model.Pager.EndPage)
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#">Next</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link dataLink" data-href="@Url.Action("Index", "Comments", new { pageNo = Model.Pager.CurrentPage + 1, userID = (Model.User != null ? Model.User.Id : null), searchTerm = !string.IsNullOrEmpty(Model.SearchTerm) ? Model.SearchTerm : null })">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No comments found.
        </div>
    }

        <script>
        $("#searchBtn").click(function () {
	    	$("#dtLoader").show();
	    	$("#response-holder").hide();

	    	$.ajax({
	    		url: "@Url.Comments(userID: (Model.User != null ? Model.User.Id : string.Empty))",
	    		method: "post",
                data: $("#searchForm").serialize()
	    	})
	    	.done(function (response) {
                $("#response-holder").html(response);
                $("#dtLoader").hide();
                $("#response-holder").show();
	    	});
	    });

        $(".dataLink").click(function () {
            var url = $(this).attr("data-href");

            if (url != undefined && url != "") {
                $("#dtLoader").show();
                $("#response-holder").hide();

                $.ajax({
                    url: url,
                })
                .done(function (response) {
                    $("#response-holder").html(response);
                    $("#dtLoader").hide();
                    $("#response-holder").show();
                });
            }
        });

        $(".btnDeleteComment").click(function () {
            swal({
				title: "Are you sure you want to delete this comment?",
				icon: "warning",
				buttons: true,
				dangerMode: true,
			})
			.then((willDelete) => {
				if (willDelete) {
					$("#dtLoader").show();
					$("#response-holder").hide();

					$.ajax({
						url: "@Url.DeleteAction("Comments")",
                        method: "post",
                        data: { id : $(this).attr("data-id") }
					})
                    .done(function (response) {
                        if (response != null && response.Success != undefined && response.Success) {
                           $("#searchBtn").click();
					    }
					    else {
                            swal("Error!", response.Message, "error");
					    }
					});
				}
			});
        });
        </script>
}
else
{
    <div class="alert alert-warning" role="alert">
        No data available.
    </div>
}